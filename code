import os
import re
import docx2txt
import streamlit as st
from pdfminer.high_level import extract_text
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

def extract_resume_text(uploaded_file):
    ext = os.path.splitext(uploaded_file.name)[1].lower()
    if ext == ".pdf":
        with open("temp.pdf", "wb") as f:
            f.write(uploaded_file.read())
        return extract_text("temp.pdf")
    elif ext == ".docx":
        with open("temp.docx", "wb") as f:
            f.write(uploaded_file.read())
        return docx2txt.process("temp.docx")
    else:
        return None

def extract_skills(text):
    skill_list = ["python", "java", "c++", "sql", "html", "css", "flask", "django", "opencv", "pytorch"]
    return list({skill for skill in skill_list if re.search(r'\b' + re.escape(skill) + r'\b', text, re.IGNORECASE)})

def extract_education(text):
    degrees = ["bachelor", "bs", "bsc", "ms", "msc", "phd", "master"]
    for deg in degrees:
        if deg in text.lower():
            return deg.capitalize()
    return "Not found"

def extract_experience(text):
    match = re.search(r'(\d+)\s+years', text.lower())
    return match.group(1) + " years" if match else "Not found"

def compute_similarity(resume_text, jd_text):
    vectorizer = TfidfVectorizer()
    vectors = vectorizer.fit_transform([resume_text, jd_text])
    score = cosine_similarity(vectors[0:1], vectors[1:2])
    return round(score[0][0] * 100, 2)

def rank_candidate(similarity_score, skills):
    score = similarity_score
    if len(skills) > 5:
        score += 10
    elif len(skills) > 3:
        score += 5
    return min(score, 100)

st.set_page_config(page_title="AI Resume Screener", layout="centered")
st.title("ðŸ“„ AI-Based Resume Screener")

resume_file = st.file_uploader("Upload Resume (.pdf or .docx)", type=["pdf", "docx"])
jd_input_type = st.radio("How do you want to provide the Job Description?", ("Paste Text", "Upload File"))

if jd_input_type == "Paste Text":
    jd_text = st.text_area("Paste the Job Description here")
else:
    jd_file = st.file_uploader("Upload Job Description (Text File)", type=["txt"])
    jd_text = jd_file.read().decode("utf-8") if jd_file else ""

if resume_file and jd_text:
    resume_text = extract_resume_text(resume_file)

    if resume_text:
        skills = extract_skills(resume_text)
        education = extract_education(resume_text)
        experience = extract_experience(resume_text)
        similarity = compute_similarity(resume_text, jd_text)
        final_score = rank_candidate(similarity, skills)

        st.subheader("ðŸ“Š Resume Analysis Report")
        st.write(f"**Skills Found:** {', '.join(skills) if skills else 'None'}")
        st.write(f"**Education Level:** {education}")
        st.write(f"**Experience:** {experience}")
        st.write(f"**JD Similarity Score:** {similarity}%")
        st.write(f"**Final Candidate Score:** {final_score}/100")
    else:
        st.error("Unsupported file format. Please upload a .pdf or .docx resume.")
else:
    st.info("Please upload both a resume and a job description.")
